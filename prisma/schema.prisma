// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now())
  compains      Compain[]
  Party         Party[]
  MainCharacter MainCharacter[]
  Character     Character[]
}

model Compain {
  id             String          @id @default(uuid())
  self           Int             @unique @default(dbgenerated("floor(random() * 1000000)::int"))
  title          String
  description    String
  parties        Party[]
  mainCharacters MainCharacter[]
  characters     Character[]
  createdAt      DateTime        @default(now())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
}

model Party {
  id             String               @id @default(uuid())
  self           Int                  @unique @default(dbgenerated("floor(random() * 1000000)::int"))
  title          String
  description    String
  compainId      String
  compain        Compain              @relation(fields: [compainId], references: [id])
  log            String?
  characters     PartyCharacter[]
  mainCharacters PartyMainCharacter[]
  createdAt      DateTime             @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model MainCharacter {
  id                 String               @id @default(uuid())
  compainId          String
  compain            Compain              @relation(fields: [compainId], references: [id])
  name               String
  partyMainCharacter PartyMainCharacter[]
  userId             String
  user               User                 @relation(fields: [userId], references: [id])
}

model Character {
  id             String           @id @default(uuid())
  compainId      String
  compain        Compain          @relation(fields: [compainId], references: [id])
  name           String
  PartyCharacter PartyCharacter[]

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model PartyCharacter {
  partyId     String
  characterId String
  party       Party     @relation(fields: [partyId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])

  @@id([partyId, characterId])
}

model PartyMainCharacter {
  partyId         String
  mainCharacterId String
  party           Party         @relation(fields: [partyId], references: [id])
  mainCharacter   MainCharacter @relation(fields: [mainCharacterId], references: [id])

  @@id([partyId, mainCharacterId])
}

// model Log {
//   id        String   @id @default(uuid())
//   log String

//   createdAt DateTime @default(now())
// }

// model  {
//   id    Int     @id @default(autoincrement())
//   name  String
//   email String  @unique
// }
